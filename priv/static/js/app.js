// Generated by CoffeeScript 1.10.0
(function() {
  var ChatController, ChatService, RoomService, chooseRandomEndpoint, endPoints, ftChat,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ftChat = angular.module('ft-chat', []);

  endPoints = ['localhost:8000'];

  chooseRandomEndpoint = function(blacklist) {
    var available, e, ix;
    available = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = endPoints.length; i < len; i++) {
        e = endPoints[i];
        if (indexOf.call(blacklist, e) < 0) {
          results.push(e);
        }
      }
      return results;
    })();
    ix = Math.floor(Math.random() * available.length);
    return available[ix];
  };

  ftChat.service('ChatService', ChatService = (function() {
    function ChatService() {
      this.status = WebSocket.CLOSED;
      this.endPoint = chooseRandomEndpoint([]);
    }

    ChatService.prototype.connect = function() {
      var error, error1, onDisconnect;
      try {
        this.ws = new WebSocket('ws://' + this.endPoint + '/chat');
        this.ws.onopen = (function(_this) {
          return function() {
            _this.status = WebSocket.OPEN;
            if (_this.onConnectCb) {
              return _this.onConnectCb(_this.endPoint);
            }
          };
        })(this);
        onDisconnect = (function(_this) {
          return function(evt) {
            var ref;
            if (_this.onDisconnectCb && ((ref = _this.ws.readyState) === WebSocket.CLOSED || ref === WebSocket.CLOSING)) {
              _this.onDisconnectCb();
            }
            return _this.status = _this.ws.readyState;
          };
        })(this);
        this.ws.onerror = onDisconnect;
        return this.ws.onclose = onDisconnect;
      } catch (error1) {
        error = error1;
        this.ws = void 0;
        return console.log(error);
      }
    };

    ChatService.prototype.onConnect = function(callback) {
      return this.onConnectCb = callback;
    };

    ChatService.prototype.onMessage = function(callback) {
      return this.ws.onmessage = function(evt) {
        return callback(JSON.parse(evt.data));
      };
    };

    ChatService.prototype.onDisconnect = function(callback) {
      return this.onDisconnectCb = callback;
    };

    ChatService.prototype.send = function(message) {
      return this.ws.send(JSON.stringify(message));
    };

    return ChatService;

  })());

  ftChat.service('RoomService', [
    '$http', RoomService = (function() {
      function RoomService($http) {
        this.$http = $http;
      }

      RoomService.prototype.getRooms = function() {
        return this.$http.get('/rooms');
      };

      return RoomService;

    })()
  ]);

  ftChat.controller('ChatController', [
    '$scope', 'RoomService', 'ChatService', ChatController = (function() {
      function ChatController($scope, roomService, chatService) {
        this.$scope = $scope;
        chatService.onConnect((function(_this) {
          return function(connectedEndPoint) {
            _this.$scope.connectedEndPoint = connectedEndPoint;
            return _this.$scope.$apply();
          };
        })(this));
        chatService.onDisconnect((function(_this) {
          return function() {
            _this.$scope.connectedEndPoint = void 0;
            return _this.$scope.$apply();
          };
        })(this));
        chatService.connect();
        roomService.getRooms().then((function(_this) {
          return function(response) {
            return _this.$scope.allRooms = response.data.rooms.sort();
          };
        })(this));
      }

      ChatController.prototype.selectRoom = function(room) {
        return this.$scope.selectedRoom = room;
      };

      return ChatController;

    })()
  ]);

}).call(this);
